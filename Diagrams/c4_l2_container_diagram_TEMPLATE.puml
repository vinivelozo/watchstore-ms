@startuml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!include FONTAWESOME/users.puml

AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")
AddRelTag(aggregate_root, $lineColor="red")

LAYOUT_TOP_DOWN()
'LAYOUT_WITH_LEGEND()
SHOW_PERSON_OUTLINE()
'HIDE_STEREOTYPE()

title Container Diagram for watch store System

Person(employee, "Employee", "Employee of the watch store")
System_Boundary(watchstore, "Watch Store System") {
    Container(webapp, "Web Application", "JavaScript, React", "Delivers the static content and the watch store single page application")
    Container(singlepage_app, "Single-Page Application", "JavaScript, React", "Provides the watch store functionality to employees via their browser")
    Container(api_gateway, "API-Gateway", "Java, Spring Boot", "Provides watch store functionality via JSON/REST HTTPS API")


    Container(sales_service, "Sales-service", "Java, Spring Boot", "Provides sales functionality using the aggregator pattern via JSON/REST HTTPS API.", $tags = "microService")
    Container(inventory_service, "Inventory-service", "Java, Spring Boot", "Provides inventory functionality via JSON/REST HTTPS API.", $tags = "microService")
    Container(employees_service, "Employees-service", "Java, Spring Boot", "Provides employee functionality via JSON/REST HTTPS API.", $tags = "microService")
    Container(stores_service, "Stores-service", "Java, Spring Boot", "Provides stores functionality via JSON/REST HTTPS API.", $tags = "microService")

    ContainerDb(employees_db, "Employees DB", "MySQL 5.5.x", "Stores employees information", $tags = "storage")
    ContainerDb(inventory_db, "Inventory DB", "MySQL 5.5.x", "Stores inventory information", $tags = "storage")
    ContainerDb(stores_db, "Stores DB", "MySQL 5.5.x", "Stores the stores information", $tags = "storage")
    ContainerDb(sales_db, "Sales DB", "Mongo DB", "Stores sales information", $tags = "storage")

    Rel(employee, webapp,"Visits watchstore.com using", "HTTPS")
    Rel_R(webapp, singlepage_app, "Delivers to the employees's browser")
    Rel(employee, singlepage_app, "views inventory and tracks sales using", "HTTPS")
    Rel(singlepage_app, api_gateway, "Makes API calls to", "JSON/REST/HTPPS")
    Rel(api_gateway, employees_service,"makes API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, stores_service,"makes API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, inventory_service,"makes API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, sales_service,"makes API calls to", "JSON/REST/HTTPS")
    Rel(sales_service, stores_service,"makes API calls to", "JSON/REST/HTTPS")
    Rel(sales_service, inventory_service,"makes API calls to", "JSON/REST/HTTPS")
    Rel(sales_service, employees_service,"makes API calls to", "JSON/REST/HTTPS")
    Rel_D(stores_service, stores_db, "Reads from and writes to", "JDBC")
    Rel_D(employees_service, employees_db, "Reads from and writes to", "JDBC")
    Rel_D(inventory_service, inventory_db, "Reads from and writes to", "JDBC")
    Rel_R(sales_service, sales_db, "Reads from and writes to", "Mongo")



}

@enduml